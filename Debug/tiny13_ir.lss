
tiny13_ir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002f0  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  000003a6  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000006b4  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000097  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00000af3  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000068  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000494  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000030b  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000550  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000009c  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000026d  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000083  00000000  00000000  00001b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	3b c0       	rjmp	.+118    	; 0x7a <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e0 ef       	ldi	r30, 0xF0	; 240
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	f9 d0       	rcall	.+498    	; 0x236 <main>
  44:	53 c1       	rjmp	.+678    	; 0x2ec <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <clock_prescaler_select>:
#include "cpuclk.h"
#include <util/atomic.h>

void clock_prescaler_select(uint8_t division_factor)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  48:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  4a:	f8 94       	cli
	{
		CLKPR = (1<<CLKPCE);
  4c:	20 e8       	ldi	r18, 0x80	; 128
  4e:	26 bd       	out	0x26, r18	; 38
		CLKPR = division_factor;
  50:	86 bd       	out	0x26, r24	; 38
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  52:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
  54:	08 95       	ret

00000056 <dd_rc5_ini>:
		DD_RC5_LED_PRZ_PORT	 &=  ~(1<<DD_RC5_LED_PRZ_PIN);
	#endif


	//Ustaw pin przerwania jako wejœcie bez w³¹czonego rezystora pull-up
    DD_RC5_PRZERWANIE_INT_DDR  &= ~(1<<DD_RC5_PRZERWANIE_INT_PIN); 
  56:	b9 98       	cbi	0x17, 1	; 23
    DD_RC5_PRZERWANIE_INT_PORT &= ~(1<<DD_RC5_PRZERWANIE_INT_PIN);
  58:	c1 98       	cbi	0x18, 1	; 24


	//ustaw wykrywanie zbocza opadaj¹cego na pinie INT0 (PD2)
	//zgodnie ze standardem RC5 zbocze opadaj¹ce bêdzie pierwszym zboczem
	//pierwszego bitu startu
    MCUCR |= (1<<ISC01);
  5a:	85 b7       	in	r24, 0x35	; 53
  5c:	82 60       	ori	r24, 0x02	; 2
  5e:	85 bf       	out	0x35, r24	; 53

	//W³¹cz przerwania z pinu INT0
    DD_RC5_WLACZ_DEKODOWANIE;
  60:	8b b7       	in	r24, 0x3b	; 59
  62:	80 64       	ori	r24, 0x40	; 64
  64:	8b bf       	out	0x3b, r24	; 59

    //Ustawienia timera
    TCCR0B = DD_RC5_TIMER_PRESKALER_BITY;
  66:	84 e0       	ldi	r24, 0x04	; 4
  68:	83 bf       	out	0x33, r24	; 51

	//Je¿eli wczeœniej u¿ywa³eœ tego timer0, to odkomentuj poni¿sze linie
	GTCCR |= (1<<PSR10);	//resetuj preskaler timer0
  6a:	88 b5       	in	r24, 0x28	; 40
  6c:	81 60       	ori	r24, 0x01	; 1
  6e:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00;			//zeruj timer0
  70:	12 be       	out	0x32, r1	; 50
    TIFR0 |= (1<<TOV0); 	//zgaœ flagê przerwania timer0
  72:	88 b7       	in	r24, 0x38	; 56
  74:	82 60       	ori	r24, 0x02	; 2
  76:	88 bf       	out	0x38, r24	; 56
  78:	08 95       	ret

0000007a <__vector_1>:


//-----------------------------------------------------------------------------

ISR(DD_RC5_PRZERWANIE_WEKTOR)
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	2f 93       	push	r18
  86:	3f 93       	push	r19
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	MCUCR |= (1<<ISC01);
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	85 bf       	out	0x35, r24	; 53
	
	//zmienne pomocnicze statyczne dostêpne tylko w tej funkcji
	static unsigned char 	dd_rc5_numer_bitu = 1;
	static unsigned char 	dd_rc5_polbit_licznik = 0;
	static unsigned int 	dd_rc5_dane_temp = 0;
MCUCR |= (1<<ISC01);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bf       	out	0x35, r24	; 53
  //Je¿eli program g³ówny lub inny fragment programu, nie odczyta³
  //odebranch wczeœniej danych, to wychodzimy z przerwania 
  //i nie dekodujemy w³aœnie nadawanej przez pilota ramki.
  //Jest to zabezpieczenie, przed nadpisaniem poprzednio odebranych,
  //a jeszcze nie u¿ytych danych z pilota.
  if(!(dd_rc5_status & DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU)){
  98:	80 91 66 00 	lds	r24, 0x0066
  9c:	87 fd       	sbrc	r24, 7
  9e:	b2 c0       	rjmp	.+356    	; 0x204 <__stack+0x165>

//-----------------------------------------------------------------------------

inline void dd_rc5_zmien_zbocze_na_przeciwne(void){
	//ustaw wykrywanie zbocza przeciwnego do aktualnie ustawionego
	MCUCR ^= (1<<ISC00);	
  a0:	85 b7       	in	r24, 0x35	; 53
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	85 bf       	out	0x35, r24	; 53
	//analizowa³ pamiêtaj, ¿e ju¿ tutaj  zmieniamy zbocze na przeciwne!!!
	dd_rc5_zmien_zbocze_na_przeciwne();

	
	//W zale¿noœci, który bit jest aktualnie dekodowany
	switch(dd_rc5_numer_bitu){
  a8:	20 91 60 00 	lds	r18, 0x0060
  ac:	21 30       	cpi	r18, 0x01	; 1
  ae:	19 f0       	breq	.+6      	; 0xb6 <__stack+0x17>
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	a9 f5       	brne	.+106    	; 0x11e <__stack+0x7f>
  b4:	14 c0       	rjmp	.+40     	; 0xde <__stack+0x3f>
			//
			//UWAGA!! Tutaj stosujemy prost¹ zasadê dla warunku czasu cziszy
			//przed pierwszym bitem startu polegaj¹c¹ na przyjêciu, ¿e czas
			//ciszy musi byæ d³u¿szy ni¿ czas przepe³nienia timera. Jest to
			//œwiadome uproszczenie algorytmu - szczegó³y w linku.
			if(
  b6:	08 b6       	in	r0, 0x38	; 56
  b8:	01 fe       	sbrs	r0, 1
  ba:	a4 c0       	rjmp	.+328    	; 0x204 <__stack+0x165>

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR10);	//resetuj preskaler timera
  bc:	88 b5       	in	r24, 0x28	; 40
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00; 			//zeruj timer
  c2:	12 be       	out	0x32, r1	; 50
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
  c4:	88 b7       	in	r24, 0x38	; 56
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	88 bf       	out	0x38, r24	; 56
				//by mieæ pewnoœæ, ¿e rozpoczynamy odbiór nowej ramki.

				dd_rc5_zeruj_timer_i_flage_przepelnienia();

				//nastêpny bit bêdzie bitem nr 2
				dd_rc5_numer_bitu=2;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 60 00 	sts	0x0060, r24

				//wyzeruj pomocnicz¹ zmienn¹ odebranych danych
				dd_rc5_dane_temp = 0;
  d0:	10 92 63 00 	sts	0x0063, r1
  d4:	10 92 62 00 	sts	0x0062, r1
				dd_rc5_polbit_licznik = 0;
  d8:	10 92 64 00 	sts	0x0064, r1
  dc:	93 c0       	rjmp	.+294    	; 0x204 <__stack+0x165>

		case 2:

			//sprawdzamy, czy czas po³owy bitu jest zgodny z parametrami
			//oraz flagê przepe³nienia zgodnie z uwag¹ na pocz¹tku funkcji
			if(
  de:	08 b6       	in	r0, 0x38	; 56
  e0:	01 fc       	sbrc	r0, 1
  e2:	26 c0       	rjmp	.+76     	; 0x130 <__stack+0x91>
				(TIFR0 & (1<<TOV0)) //je¿eli wyst¹pi³o przepe³nienie timera
				|| (TCNT0 < DD_RC5_OKRES_POLOWY_BITU_MIN) //lub pó³bit za krótki
  e4:	82 b7       	in	r24, 0x32	; 50
  e6:	8a 31       	cpi	r24, 0x1A	; 26
  e8:	18 f1       	brcs	.+70     	; 0x130 <__stack+0x91>
				|| (TCNT0 > DD_RC5_OKRES_POLOWY_BITU_MAX) //lub pó³bit za d³ugi
  ea:	82 b7       	in	r24, 0x32	; 50
  ec:	88 32       	cpi	r24, 0x28	; 40
  ee:	08 f0       	brcs	.+2      	; 0xf2 <__stack+0x53>
  f0:	1f c0       	rjmp	.+62     	; 0x130 <__stack+0x91>
			}else{ 

				//Czas jest z zakresu pó³bitów		

				//Które zbocze wywo³a³o przerwanie?
				if(MCUCR & (1<<ISC00)){
  f2:	05 b6       	in	r0, 0x35	; 53
  f4:	00 fe       	sbrs	r0, 0
  f6:	0b c0       	rjmp	.+22     	; 0x10e <__stack+0x6f>

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR10);	//resetuj preskaler timera
  f8:	88 b5       	in	r24, 0x28	; 40
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00; 			//zeruj timer
  fe:	12 be       	out	0x32, r1	; 50
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 100:	88 b7       	in	r24, 0x38	; 56
 102:	82 60       	ori	r24, 0x02	; 2
 104:	88 bf       	out	0x38, r24	; 56
					//co oznacza, ¿e drugi bit startu odebrany prawid³owo

					dd_rc5_zeruj_timer_i_flage_przepelnienia();

					//zwiêksz licznik bitów
					dd_rc5_numer_bitu++;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	80 93 60 00 	sts	0x0060, r24
 10c:	7b c0       	rjmp	.+246    	; 0x204 <__stack+0x165>

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR10);	//resetuj preskaler timera
 10e:	88 b5       	in	r24, 0x28	; 40
 110:	81 60       	ori	r24, 0x01	; 1
 112:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00; 			//zeruj timer
 114:	12 be       	out	0x32, r1	; 50
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 116:	88 b7       	in	r24, 0x38	; 56
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	88 bf       	out	0x38, r24	; 56
 11c:	73 c0       	rjmp	.+230    	; 0x204 <__stack+0x165>

			//Tutaj odbieramy pozosta³e bity ramki			

			//W zale¿noœci jaki czas up³yn¹³ od ostatniego zbocza (przerwania)
			//Czy czas wykracza poza brzegowe parametry (min i max)
			if(
 11e:	08 b6       	in	r0, 0x38	; 56
 120:	01 fc       	sbrc	r0, 1
 122:	06 c0       	rjmp	.+12     	; 0x130 <__stack+0x91>
				(TIFR0 & (1<<TOV0)) //przepe³nienie timera to b³¹d
				|| (TCNT0 < DD_RC5_OKRES_POLOWY_BITU_MIN)
 124:	82 b7       	in	r24, 0x32	; 50
 126:	8a 31       	cpi	r24, 0x1A	; 26
 128:	18 f0       	brcs	.+6      	; 0x130 <__stack+0x91>
				|| (TCNT0 > DD_RC5_OKRES_BITU_MAX)
 12a:	82 b7       	in	r24, 0x32	; 50
 12c:	80 35       	cpi	r24, 0x50	; 80
 12e:	10 f0       	brcs	.+4      	; 0x134 <__stack+0x95>
				//w za³o¿onych progach bitu ani pó³bitu. Przerywamy wiêc
				//dekodowanie tej ramki sygna³u i rozpoczynamy 
				//oczekiwanie na pocz¹tek kolejnej ramki

				//przygotuj siê do odbioru nowej ramki
				dd_rc5_numer_bitu = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	ea cf       	rjmp	.-44     	; 0x108 <__stack+0x69>



			//Czy min¹³ czas pó³bitu?
			}else if( 
				(TCNT0 <= DD_RC5_OKRES_POLOWY_BITU_MAX)
 134:	82 b7       	in	r24, 0x32	; 50




			//Czy min¹³ czas pó³bitu?
			}else if( 
 136:	88 32       	cpi	r24, 0x28	; 40
 138:	30 f5       	brcc	.+76     	; 0x186 <__stack+0xe7>
			){

				//Up³yn¹³ czas równy po³owie bitu

				//sprawdzamy, czy to druga po³owa bitu
				if(dd_rc5_polbit_licznik){
 13a:	80 91 64 00 	lds	r24, 0x0064
 13e:	88 23       	and	r24, r24
 140:	c1 f0       	breq	.+48     	; 0x172 <__stack+0xd3>
					//bitu. Jest to moment, w którym ustalamy wartoœæ
					//odebranego bitu na podstawie kierunku zbocza.

					//Przesuñ dane o jeden bit w lewo, by zrobiæ miejsce
					//na odebrany bit
					dd_rc5_dane_temp <<= 1;
 142:	80 91 62 00 	lds	r24, 0x0062
 146:	90 91 63 00 	lds	r25, 0x0063
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	90 93 63 00 	sts	0x0063, r25
 152:	80 93 62 00 	sts	0x0062, r24
					//Je¿eli aktualnie ustawione jest zbocze narastaj¹ce 
					//to znaczy, ¿e przerwanie zosta³o wywo³ane przez zbocze 
					//opadaj¹ce, a to oznacza, ¿e odebraliœmy jedynkê logiczn¹,
					//któr¹ nale¿y dodaæ na najmniej znacz¹cej pozycji rejestru
					//odbiorczego. Czytaj uwagê na pocz¹tku tej funkcji.
					if(MCUCR & (1<<ISC00)) dd_rc5_dane_temp |= 1;
 156:	05 b6       	in	r0, 0x35	; 53
 158:	00 fe       	sbrs	r0, 0
 15a:	05 c0       	rjmp	.+10     	; 0x166 <__stack+0xc7>
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	90 93 63 00 	sts	0x0063, r25
 162:	80 93 62 00 	sts	0x0062, r24

					//wyzeruj licznik pó³bitów
					dd_rc5_polbit_licznik = 0;
 166:	10 92 64 00 	sts	0x0064, r1

					//zwiêksz licznik bitów
					dd_rc5_numer_bitu++;
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	20 93 60 00 	sts	0x0060, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <__stack+0xd7>

					//To pierwsza po³owa dekodowanego bitu, czyli jesteœmy 
					//aktualnie na pocz¹tku czasu przesy³anego bitu.

					//Ustawiamy licznik pó³bitów
					dd_rc5_polbit_licznik = 1;
 172:	90 93 64 00 	sts	0x0064, r25

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR10);	//resetuj preskaler timera
 176:	88 b5       	in	r24, 0x28	; 40
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00; 			//zeruj timer
 17c:	12 be       	out	0x32, r1	; 50
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 17e:	88 b7       	in	r24, 0x38	; 56
 180:	82 60       	ori	r24, 0x02	; 2
 182:	88 bf       	out	0x38, r24	; 56
 184:	1e c0       	rjmp	.+60     	; 0x1c2 <__stack+0x123>
				//odbieranego bitu. Jest to moment, w którym ustalamy wartoœæ
				//odebranego bitu na podstawie kierunku zbocza.

				//Przesuñ rejestr odbiorczy o jeden bit w lewo by zrobiæ 
				//miejsce na odebrany bit
				dd_rc5_dane_temp <<= 1;
 186:	80 91 62 00 	lds	r24, 0x0062
 18a:	90 91 63 00 	lds	r25, 0x0063
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	90 93 63 00 	sts	0x0063, r25
 196:	80 93 62 00 	sts	0x0062, r24
				//Je¿eli aktualnie ustawione jest zbocze narastaj¹ce 
				//to znaczy, ¿e przerwanie zosta³o wywo³ane przez zbocze 
				//opadaj¹ce, a to oznacza, ¿e odebraliœmy jedynkê logiczn¹,
				//któr¹ nale¿y dodaæ na najmniej znacz¹cej pozycji rejestru
				//odbiorczego. Czytaj uwagê na pocz¹tku tej funkcji.
				if(MCUCR & (1<<ISC00)) dd_rc5_dane_temp |= 1;
 19a:	05 b6       	in	r0, 0x35	; 53
 19c:	00 fe       	sbrs	r0, 0
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <__stack+0x10b>
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	90 93 63 00 	sts	0x0063, r25
 1a6:	80 93 62 00 	sts	0x0062, r24

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR10);	//resetuj preskaler timera
 1aa:	88 b5       	in	r24, 0x28	; 40
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00; 			//zeruj timer
 1b0:	12 be       	out	0x32, r1	; 50
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 1b2:	88 b7       	in	r24, 0x38	; 56
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	88 bf       	out	0x38, r24	; 56
				if(MCUCR & (1<<ISC00)) dd_rc5_dane_temp |= 1;

				dd_rc5_zeruj_timer_i_flage_przepelnienia();

				//zwiêksz licznik bitów
				dd_rc5_numer_bitu++;
 1b8:	80 91 60 00 	lds	r24, 0x0060
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 60 00 	sts	0x0060, r24

			}


			//czy to ju¿ ostatni bit?
			if(dd_rc5_numer_bitu > 14){
 1c2:	80 91 60 00 	lds	r24, 0x0060
 1c6:	8f 30       	cpi	r24, 0x0F	; 15
 1c8:	e8 f0       	brcs	.+58     	; 0x204 <__stack+0x165>
				//Tak, odebrano ostatni bit

				//Zapisz dane do zmiennych globalnych

				//1-Dane s¹ na szeœciu najm³odszych bitach
				dd_rc5_dane_odebrane = dd_rc5_dane_temp & 0b111111;
 1ca:	80 91 62 00 	lds	r24, 0x0062
 1ce:	90 91 63 00 	lds	r25, 0x0063
 1d2:	9c 01       	movw	r18, r24
 1d4:	2f 73       	andi	r18, 0x3F	; 63
 1d6:	33 27       	eor	r19, r19
 1d8:	20 93 67 00 	sts	0x0067, r18

				//2-Adres urz¹dzenia i bit toggle 
				//przesuñ w prawo o 6 pozycji pozbywaj¹c siê bitów danych
				dd_rc5_dane_temp >>= 6; 
 1dc:	26 e0       	ldi	r18, 0x06	; 6
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	2a 95       	dec	r18
 1e4:	e1 f7       	brne	.-8      	; 0x1de <__stack+0x13f>
 1e6:	90 93 63 00 	sts	0x0063, r25
 1ea:	80 93 62 00 	sts	0x0062, r24
				//przepisz bity do rejestru statusu i dodaj bit gotowoœci
				//danych do odczytu
				dd_rc5_status = (dd_rc5_dane_temp & 0b111111) 
 1ee:	8f 73       	andi	r24, 0x3F	; 63
 1f0:	99 27       	eor	r25, r25
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	80 93 66 00 	sts	0x0066, r24
								| DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU;

				//przygotuj siê do odbioru nowej ramki
				dd_rc5_numer_bitu = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 60 00 	sts	0x0060, r24

				//Wy³¹czamy dekodowanie (blokada przerwania INT), do momentu
				//gdy program g³ówny ponownie go w³¹czy
				DD_RC5_WYLACZ_DEKODOWANIE;
 1fe:	8b b7       	in	r24, 0x3b	; 59
 200:	8f 7b       	andi	r24, 0xBF	; 191
 202:	8b bf       	out	0x3b, r24	; 59
  }


  //Je¿eli na koñcu funkcji przerwania numer bitu ma wartoœæ 1
  //to oznacza, ¿e zarz¹dano przerwania dekodowania z powodu b³êdu
  if(dd_rc5_numer_bitu==1){
 204:	80 91 60 00 	lds	r24, 0x0060
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	61 f4       	brne	.+24     	; 0x224 <__stack+0x185>

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR10);	//resetuj preskaler timera
 20c:	88 b5       	in	r24, 0x28	; 40
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00; 			//zeruj timer
 212:	12 be       	out	0x32, r1	; 50
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 214:	88 b7       	in	r24, 0x38	; 56
 216:	82 60       	ori	r24, 0x02	; 2
 218:	88 bf       	out	0x38, r24	; 56
}

//-----------------------------------------------------------------------------

inline void dd_rc5_ustaw_zbocze_opadajace(void){
	MCUCR &= ~(1<<ISC00);	//ustaw wykrywanie zbocza opadaj¹cego
 21a:	85 b7       	in	r24, 0x35	; 53
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	85 bf       	out	0x35, r24	; 53
  //to oznacza, ¿e zarz¹dano przerwania dekodowania z powodu b³êdu
  if(dd_rc5_numer_bitu==1){
  	//ustawiamy stan pocz¹tkowy 
	dd_rc5_zeruj_timer_i_flage_przepelnienia();
	dd_rc5_ustaw_zbocze_opadajace();
	dd_rc5_polbit_licznik = 0;
 220:	10 92 64 00 	sts	0x0064, r1
  //wy³¹cz diodê sygnalizuj¹c¹ przerwanie
  #ifdef _DD_RC5_WLACZ_DIODE_PRZERWAN_
	DD_RC5_LED_PRZ_OFF;
  #endif

}
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <main>:
volatile unsigned char dd_rc5_status = 0;
volatile unsigned char dd_rc5_last_toggle = 0;

int main(void)
{
	clock_prescaler_select(CLKDF_1); //9,6MHz
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	07 df       	rcall	.-498    	; 0x48 <clock_prescaler_select>
	DDRB = (1<<PORTB0)|(1<<PORTB2)|(1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5);
 23a:	8d e3       	ldi	r24, 0x3D	; 61
 23c:	87 bb       	out	0x17, r24	; 23
	PORTB = 1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	85 ea       	ldi	r24, 0xA5	; 165
 246:	9e e0       	ldi	r25, 0x0E	; 14
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x12>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x1c>
 252:	00 00       	nop
	_delay_ms(500);
	PORTB = 0;
 254:	18 ba       	out	0x18, r1	; 24
	
	dd_rc5_ini();
 256:	ff de       	rcall	.-514    	; 0x56 <dd_rc5_ini>
	sleep_enable();
 258:	85 b7       	in	r24, 0x35	; 53
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	85 bf       	out	0x35, r24	; 53
	set_sleep_mode(SLEEP_MODE_IDLE);
 25e:	85 b7       	in	r24, 0x35	; 53
 260:	87 7e       	andi	r24, 0xE7	; 231
 262:	85 bf       	out	0x35, r24	; 53
	sei();
 264:	78 94       	sei
        {
			dd_rc5_status &= ~DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU;
			DD_RC5_WLACZ_DEKODOWANIE;
			//PORTB ^= (1<<PORTB0);
			if((dd_rc5_dane_odebrane == 0x01)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB0); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
			if((dd_rc5_dane_odebrane == 0x0c)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB4); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 266:	90 e1       	ldi	r25, 0x10	; 16
        if (dd_rc5_status & DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU)
        {
			dd_rc5_status &= ~DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU;
			DD_RC5_WLACZ_DEKODOWANIE;
			//PORTB ^= (1<<PORTB0);
			if((dd_rc5_dane_odebrane == 0x01)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB0); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 268:	21 e0       	ldi	r18, 0x01	; 1
	sleep_enable();
	set_sleep_mode(SLEEP_MODE_IDLE);
	sei();
    while(1)
    {
        if (dd_rc5_status & DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU)
 26a:	80 91 66 00 	lds	r24, 0x0066
 26e:	87 ff       	sbrs	r24, 7
 270:	38 c0       	rjmp	.+112    	; 0x2e2 <main+0xac>
        {
			dd_rc5_status &= ~DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU;
 272:	80 91 66 00 	lds	r24, 0x0066
 276:	8f 77       	andi	r24, 0x7F	; 127
 278:	80 93 66 00 	sts	0x0066, r24
			DD_RC5_WLACZ_DEKODOWANIE;
 27c:	8b b7       	in	r24, 0x3b	; 59
 27e:	80 64       	ori	r24, 0x40	; 64
 280:	8b bf       	out	0x3b, r24	; 59
			//PORTB ^= (1<<PORTB0);
			if((dd_rc5_dane_odebrane == 0x01)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB0); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 282:	30 91 67 00 	lds	r19, 0x0067
 286:	40 91 65 00 	lds	r20, 0x0065
 28a:	80 91 66 00 	lds	r24, 0x0066
 28e:	80 72       	andi	r24, 0x20	; 32
 290:	48 17       	cp	r20, r24
 292:	51 f0       	breq	.+20     	; 0x2a8 <main+0x72>
 294:	31 30       	cpi	r19, 0x01	; 1
 296:	41 f4       	brne	.+16     	; 0x2a8 <main+0x72>
 298:	88 b3       	in	r24, 0x18	; 24
 29a:	82 27       	eor	r24, r18
 29c:	88 bb       	out	0x18, r24	; 24
 29e:	80 91 66 00 	lds	r24, 0x0066
 2a2:	80 72       	andi	r24, 0x20	; 32
 2a4:	80 93 65 00 	sts	0x0065, r24
			if((dd_rc5_dane_odebrane == 0x0c)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB4); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 2a8:	30 91 67 00 	lds	r19, 0x0067
 2ac:	40 91 65 00 	lds	r20, 0x0065
 2b0:	80 91 66 00 	lds	r24, 0x0066
 2b4:	80 72       	andi	r24, 0x20	; 32
 2b6:	48 17       	cp	r20, r24
 2b8:	51 f0       	breq	.+20     	; 0x2ce <main+0x98>
 2ba:	3c 30       	cpi	r19, 0x0C	; 12
 2bc:	41 f4       	brne	.+16     	; 0x2ce <main+0x98>
 2be:	88 b3       	in	r24, 0x18	; 24
 2c0:	89 27       	eor	r24, r25
 2c2:	88 bb       	out	0x18, r24	; 24
 2c4:	80 91 66 00 	lds	r24, 0x0066
 2c8:	80 72       	andi	r24, 0x20	; 32
 2ca:	80 93 65 00 	sts	0x0065, r24
			MCUCR &= ~(1<<ISC01);
 2ce:	85 b7       	in	r24, 0x35	; 53
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1<<ISC00);
 2d4:	85 b7       	in	r24, 0x35	; 53
 2d6:	8e 7f       	andi	r24, 0xFE	; 254
 2d8:	85 bf       	out	0x35, r24	; 53
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 2da:	85 b7       	in	r24, 0x35	; 53
 2dc:	87 7e       	andi	r24, 0xE7	; 231
 2de:	80 61       	ori	r24, 0x10	; 16
 2e0:	85 bf       	out	0x35, r24	; 53
		}
		set_sleep_mode(SLEEP_MODE_IDLE);
 2e2:	85 b7       	in	r24, 0x35	; 53
 2e4:	87 7e       	andi	r24, 0xE7	; 231
 2e6:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 2e8:	88 95       	sleep
    }
 2ea:	bf cf       	rjmp	.-130    	; 0x26a <main+0x34>

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
