
tiny10_ir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800040  00000308  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800042  00800042  0000039e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003b6  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000268  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000404  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000205  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000de  00000000  00000000  00001881  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	3b c0       	rjmp	.+118    	; 0x7a <__vector_1>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_copy_data>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	e8 e0       	ldi	r30, 0x08	; 8
  2a:	f3 e4       	ldi	r31, 0x43	; 67
  2c:	02 c0       	rjmp	.+4      	; 0x32 <__do_copy_data+0x10>
  2e:	31 91       	ld	r19, Z+
  30:	3d 93       	st	X+, r19
  32:	a2 34       	cpi	r26, 0x42	; 66
  34:	b2 07       	cpc	r27, r18
  36:	d9 f7       	brne	.-10     	; 0x2e <__do_copy_data+0xc>

00000038 <__do_clear_bss>:
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	a2 e4       	ldi	r26, 0x42	; 66
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	01 c0       	rjmp	.+2      	; 0x42 <.do_clear_bss_start>

00000040 <.do_clear_bss_loop>:
  40:	1d 93       	st	X+, r17

00000042 <.do_clear_bss_start>:
  42:	a8 34       	cpi	r26, 0x48	; 72
  44:	b2 07       	cpc	r27, r18
  46:	e1 f7       	brne	.-8      	; 0x40 <.do_clear_bss_loop>
  48:	19 d1       	rcall	.+562    	; 0x27c <main>
  4a:	5c c1       	rjmp	.+696    	; 0x304 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <clock_prescaler_select>:
#include "cpuclk.h"
#include <util/atomic.h>

void clock_prescaler_select(uint8_t division_factor)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  4e:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  50:	f8 94       	cli
	{
		CCP = 0xD8;
  52:	58 ed       	ldi	r21, 0xD8	; 216
  54:	5c bf       	out	0x3c, r21	; 60
		CLKPSR = division_factor;
  56:	86 bf       	out	0x36, r24	; 54
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  58:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
  5a:	08 95       	ret

0000005c <dd_rc5_ini>:
		DD_RC5_LED_PRZ_PORT	 &=  ~(1<<DD_RC5_LED_PRZ_PIN);
	#endif


	//Ustaw pin przerwania jako wejœcie bez w³¹czonego rezystora pull-up
    DD_RC5_PRZERWANIE_INT_DDR  &= ~(1<<DD_RC5_PRZERWANIE_INT_PIN); 
  5c:	0a 98       	cbi	0x01, 2	; 1
    DD_RC5_PRZERWANIE_INT_PORT &= ~(1<<DD_RC5_PRZERWANIE_INT_PIN);
  5e:	12 98       	cbi	0x02, 2	; 2


	//ustaw wykrywanie zbocza opadaj¹cego na pinie INT0 (PD2)
	//zgodnie ze standardem RC5 zbocze opadaj¹ce bêdzie pierwszym zboczem
	//pierwszego bitu startu
    EICRA |= (1<<ISC01);
  60:	a9 9a       	sbi	0x15, 1	; 21

	//W³¹cz przerwania z pinu INT0
    DD_RC5_WLACZ_DEKODOWANIE;
  62:	98 9a       	sbi	0x13, 0	; 19

    //Ustawienia timera
    TCCR0B = DD_RC5_TIMER_PRESKALER_BITY;
  64:	42 e0       	ldi	r20, 0x02	; 2
  66:	4d bd       	out	0x2d, r20	; 45

	//Je¿eli wczeœniej u¿ywa³eœ tego timer0, to odkomentuj poni¿sze linie
	GTCCR |= (1<<PSR);	//resetuj preskaler timer0
  68:	4f b5       	in	r20, 0x2f	; 47
  6a:	41 60       	ori	r20, 0x01	; 1
  6c:	4f bd       	out	0x2f, r20	; 47
	TCNT0 = 0x00;			//zeruj timer0
  6e:	19 bd       	out	0x29, r17	; 41
  70:	18 bd       	out	0x28, r17	; 40
    TIFR0 |= (1<<TOV0); 	//zgaœ flagê przerwania timer0
  72:	4a b5       	in	r20, 0x2a	; 42
  74:	41 60       	ori	r20, 0x01	; 1
  76:	4a bd       	out	0x2a, r20	; 42
  78:	08 95       	ret

0000007a <__vector_1>:


//-----------------------------------------------------------------------------

ISR(DD_RC5_PRZERWANIE_WEKTOR)
{
  7a:	1f 93       	push	r17
  7c:	0f 93       	push	r16
  7e:	0f b7       	in	r16, 0x3f	; 63
  80:	0f 93       	push	r16
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	4f 93       	push	r20
  86:	5f 93       	push	r21
  88:	6f 93       	push	r22
  8a:	7f 93       	push	r23
  8c:	8f 93       	push	r24
  8e:	af 93       	push	r26
  90:	bf 93       	push	r27
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ef 93       	push	r30
  98:	ff 93       	push	r31
	EICRA |= (1<<ISC01);
  9a:	a9 9a       	sbi	0x15, 1	; 21
	
	//zmienne pomocnicze statyczne dostêpne tylko w tej funkcji
	static unsigned char 	dd_rc5_numer_bitu = 1;
	static unsigned char 	dd_rc5_polbit_licznik = 0;
	static unsigned int 	dd_rc5_dane_temp = 0;
EICRA |= (1<<ISC01);
  9c:	a9 9a       	sbi	0x15, 1	; 21
  //Je¿eli program g³ówny lub inny fragment programu, nie odczyta³
  //odebranch wczeœniej danych, to wychodzimy z przerwania 
  //i nie dekodujemy w³aœnie nadawanej przez pilota ramki.
  //Jest to zabezpieczenie, przed nadpisaniem poprzednio odebranych,
  //a jeszcze nie u¿ytych danych z pilota.
  if(!(dd_rc5_status & DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU)){
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 81       	ld	r20, Z
  a4:	47 fd       	sbrc	r20, 7
  a6:	c9 c0       	rjmp	.+402    	; 0x23a <__vector_1+0x1c0>

//-----------------------------------------------------------------------------

inline void dd_rc5_zmien_zbocze_na_przeciwne(void){
	//ustaw wykrywanie zbocza przeciwnego do aktualnie ustawionego
	EICRA ^= (1<<ISC00);	
  a8:	45 b3       	in	r20, 0x15	; 21
  aa:	71 e0       	ldi	r23, 0x01	; 1
  ac:	47 27       	eor	r20, r23
  ae:	45 bb       	out	0x15, r20	; 21
	//analizowa³ pamiêtaj, ¿e ju¿ tutaj  zmieniamy zbocze na przeciwne!!!
	dd_rc5_zmien_zbocze_na_przeciwne();

	
	//W zale¿noœci, który bit jest aktualnie dekodowany
	switch(dd_rc5_numer_bitu){
  b0:	e0 e4       	ldi	r30, 0x40	; 64
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	60 81       	ld	r22, Z
  b6:	61 30       	cpi	r22, 0x01	; 1
  b8:	19 f0       	breq	.+6      	; 0xc0 <__vector_1+0x46>
  ba:	62 30       	cpi	r22, 0x02	; 2
  bc:	d1 f5       	brne	.+116    	; 0x132 <__vector_1+0xb8>
  be:	15 c0       	rjmp	.+42     	; 0xea <__vector_1+0x70>
			//
			//UWAGA!! Tutaj stosujemy prost¹ zasadê dla warunku czasu cziszy
			//przed pierwszym bitem startu polegaj¹c¹ na przyjêciu, ¿e czas
			//ciszy musi byæ d³u¿szy ni¿ czas przepe³nienia timera. Jest to
			//œwiadome uproszczenie algorytmu - szczegó³y w linku.
			if(
  c0:	0a b5       	in	r16, 0x2a	; 42
  c2:	00 ff       	sbrs	r16, 0
  c4:	ba c0       	rjmp	.+372    	; 0x23a <__vector_1+0x1c0>

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR);	//resetuj preskaler timera
  c6:	4f b5       	in	r20, 0x2f	; 47
  c8:	41 60       	ori	r20, 0x01	; 1
  ca:	4f bd       	out	0x2f, r20	; 47
	TCNT0 = 0x00; 			//zeruj timer
  cc:	19 bd       	out	0x29, r17	; 41
  ce:	18 bd       	out	0x28, r17	; 40
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
  d0:	4a b5       	in	r20, 0x2a	; 42
  d2:	41 60       	ori	r20, 0x01	; 1
  d4:	4a bd       	out	0x2a, r20	; 42
				//by mieæ pewnoœæ, ¿e rozpoczynamy odbiór nowej ramki.

				dd_rc5_zeruj_timer_i_flage_przepelnienia();

				//nastêpny bit bêdzie bitem nr 2
				dd_rc5_numer_bitu=2;
  d6:	42 e0       	ldi	r20, 0x02	; 2
  d8:	40 83       	st	Z, r20

				//wyzeruj pomocnicz¹ zmienn¹ odebranych danych
				dd_rc5_dane_temp = 0;
  da:	e2 e4       	ldi	r30, 0x42	; 66
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	11 93       	st	Z+, r17
  e0:	10 83       	st	Z, r17
				dd_rc5_polbit_licznik = 0;
  e2:	e4 e4       	ldi	r30, 0x44	; 68
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 83       	st	Z, r17
  e8:	a8 c0       	rjmp	.+336    	; 0x23a <__vector_1+0x1c0>

		case 2:

			//sprawdzamy, czy czas po³owy bitu jest zgodny z parametrami
			//oraz flagê przepe³nienia zgodnie z uwag¹ na pocz¹tku funkcji
			if(
  ea:	0a b5       	in	r16, 0x2a	; 42
  ec:	00 fd       	sbrc	r16, 0
  ee:	2e c0       	rjmp	.+92     	; 0x14c <__vector_1+0xd2>
				(TIFR0 & (1<<TOV0)) //je¿eli wyst¹pi³o przepe³nienie timera
				|| (TCNT0 < DD_RC5_OKRES_POLOWY_BITU_MIN) //lub pó³bit za krótki
  f0:	48 b5       	in	r20, 0x28	; 40
  f2:	59 b5       	in	r21, 0x29	; 41
  f4:	4a 3c       	cpi	r20, 0xCA	; 202
  f6:	52 40       	sbci	r21, 0x02	; 2
  f8:	48 f1       	brcs	.+82     	; 0x14c <__vector_1+0xd2>
				|| (TCNT0 > DD_RC5_OKRES_POLOWY_BITU_MAX) //lub pó³bit za d³ugi
  fa:	48 b5       	in	r20, 0x28	; 40
  fc:	59 b5       	in	r21, 0x29	; 41
  fe:	49 32       	cpi	r20, 0x29	; 41
 100:	54 40       	sbci	r21, 0x04	; 4
 102:	08 f0       	brcs	.+2      	; 0x106 <__vector_1+0x8c>
 104:	23 c0       	rjmp	.+70     	; 0x14c <__vector_1+0xd2>
			}else{ 

				//Czas jest z zakresu pó³bitów		

				//Które zbocze wywo³a³o przerwanie?
				if(EICRA & (1<<ISC00)){
 106:	a8 9b       	sbis	0x15, 0	; 21
 108:	0b c0       	rjmp	.+22     	; 0x120 <__vector_1+0xa6>

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR);	//resetuj preskaler timera
 10a:	4f b5       	in	r20, 0x2f	; 47
 10c:	41 60       	ori	r20, 0x01	; 1
 10e:	4f bd       	out	0x2f, r20	; 47
	TCNT0 = 0x00; 			//zeruj timer
 110:	19 bd       	out	0x29, r17	; 41
 112:	18 bd       	out	0x28, r17	; 40
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 114:	4a b5       	in	r20, 0x2a	; 42
 116:	41 60       	ori	r20, 0x01	; 1
 118:	4a bd       	out	0x2a, r20	; 42
					//co oznacza, ¿e drugi bit startu odebrany prawid³owo

					dd_rc5_zeruj_timer_i_flage_przepelnienia();

					//zwiêksz licznik bitów
					dd_rc5_numer_bitu++;
 11a:	43 e0       	ldi	r20, 0x03	; 3
 11c:	40 83       	st	Z, r20
 11e:	8d c0       	rjmp	.+282    	; 0x23a <__vector_1+0x1c0>

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR);	//resetuj preskaler timera
 120:	4f b5       	in	r20, 0x2f	; 47
 122:	41 60       	ori	r20, 0x01	; 1
 124:	4f bd       	out	0x2f, r20	; 47
	TCNT0 = 0x00; 			//zeruj timer
 126:	19 bd       	out	0x29, r17	; 41
 128:	18 bd       	out	0x28, r17	; 40
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 12a:	4a b5       	in	r20, 0x2a	; 42
 12c:	41 60       	ori	r20, 0x01	; 1
 12e:	4a bd       	out	0x2a, r20	; 42
 130:	84 c0       	rjmp	.+264    	; 0x23a <__vector_1+0x1c0>

			//Tutaj odbieramy pozosta³e bity ramki			

			//W zale¿noœci jaki czas up³yn¹³ od ostatniego zbocza (przerwania)
			//Czy czas wykracza poza brzegowe parametry (min i max)
			if(
 132:	0a b5       	in	r16, 0x2a	; 42
 134:	00 fd       	sbrc	r16, 0
 136:	0a c0       	rjmp	.+20     	; 0x14c <__vector_1+0xd2>
				(TIFR0 & (1<<TOV0)) //przepe³nienie timera to b³¹d
				|| (TCNT0 < DD_RC5_OKRES_POLOWY_BITU_MIN)
 138:	48 b5       	in	r20, 0x28	; 40
 13a:	59 b5       	in	r21, 0x29	; 41
 13c:	4a 3c       	cpi	r20, 0xCA	; 202
 13e:	52 40       	sbci	r21, 0x02	; 2
 140:	28 f0       	brcs	.+10     	; 0x14c <__vector_1+0xd2>
				|| (TCNT0 > DD_RC5_OKRES_BITU_MAX)
 142:	48 b5       	in	r20, 0x28	; 40
 144:	59 b5       	in	r21, 0x29	; 41
 146:	41 35       	cpi	r20, 0x51	; 81
 148:	58 40       	sbci	r21, 0x08	; 8
 14a:	20 f0       	brcs	.+8      	; 0x154 <__vector_1+0xda>
				//w za³o¿onych progach bitu ani pó³bitu. Przerywamy wiêc
				//dekodowanie tej ramki sygna³u i rozpoczynamy 
				//oczekiwanie na pocz¹tek kolejnej ramki

				//przygotuj siê do odbioru nowej ramki
				dd_rc5_numer_bitu = 1;
 14c:	e0 e4       	ldi	r30, 0x40	; 64
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	e4 cf       	rjmp	.-56     	; 0x11c <__vector_1+0xa2>



			//Czy min¹³ czas pó³bitu?
			}else if( 
				(TCNT0 <= DD_RC5_OKRES_POLOWY_BITU_MAX)
 154:	48 b5       	in	r20, 0x28	; 40
 156:	59 b5       	in	r21, 0x29	; 41




			//Czy min¹³ czas pó³bitu?
			}else if( 
 158:	49 32       	cpi	r20, 0x29	; 41
 15a:	54 40       	sbci	r21, 0x04	; 4
 15c:	50 f5       	brcc	.+84     	; 0x1b2 <__vector_1+0x138>
			){

				//Up³yn¹³ czas równy po³owie bitu

				//sprawdzamy, czy to druga po³owa bitu
				if(dd_rc5_polbit_licznik){
 15e:	e4 e4       	ldi	r30, 0x44	; 68
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	40 81       	ld	r20, Z
 164:	44 23       	and	r20, r20
 166:	d9 f0       	breq	.+54     	; 0x19e <__vector_1+0x124>
					//bitu. Jest to moment, w którym ustalamy wartoœæ
					//odebranego bitu na podstawie kierunku zbocza.

					//Przesuñ dane o jeden bit w lewo, by zrobiæ miejsce
					//na odebrany bit
					dd_rc5_dane_temp <<= 1;
 168:	e2 e4       	ldi	r30, 0x42	; 66
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	40 81       	ld	r20, Z
 16e:	ef 5f       	subi	r30, 0xFF	; 255
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	50 81       	ld	r21, Z
 174:	e1 50       	subi	r30, 0x01	; 1
 176:	f0 40       	sbci	r31, 0x00	; 0
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	ef 5f       	subi	r30, 0xFF	; 255
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	50 83       	st	Z, r21
 182:	42 93       	st	-Z, r20
					//Je¿eli aktualnie ustawione jest zbocze narastaj¹ce 
					//to znaczy, ¿e przerwanie zosta³o wywo³ane przez zbocze 
					//opadaj¹ce, a to oznacza, ¿e odebraliœmy jedynkê logiczn¹,
					//któr¹ nale¿y dodaæ na najmniej znacz¹cej pozycji rejestru
					//odbiorczego. Czytaj uwagê na pocz¹tku tej funkcji.
					if(EICRA & (1<<ISC00)) dd_rc5_dane_temp |= 1;
 184:	a8 9b       	sbis	0x15, 0	; 21
 186:	03 c0       	rjmp	.+6      	; 0x18e <__vector_1+0x114>
 188:	41 60       	ori	r20, 0x01	; 1
 18a:	41 93       	st	Z+, r20
 18c:	50 83       	st	Z, r21

					//wyzeruj licznik pó³bitów
					dd_rc5_polbit_licznik = 0;
 18e:	e4 e4       	ldi	r30, 0x44	; 68
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	10 83       	st	Z, r17

					//zwiêksz licznik bitów
					dd_rc5_numer_bitu++;
 194:	6f 5f       	subi	r22, 0xFF	; 255
 196:	e0 e4       	ldi	r30, 0x40	; 64
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	60 83       	st	Z, r22
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <__vector_1+0x126>

					//To pierwsza po³owa dekodowanego bitu, czyli jesteœmy 
					//aktualnie na pocz¹tku czasu przesy³anego bitu.

					//Ustawiamy licznik pó³bitów
					dd_rc5_polbit_licznik = 1;
 19e:	70 83       	st	Z, r23

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR);	//resetuj preskaler timera
 1a0:	4f b5       	in	r20, 0x2f	; 47
 1a2:	41 60       	ori	r20, 0x01	; 1
 1a4:	4f bd       	out	0x2f, r20	; 47
	TCNT0 = 0x00; 			//zeruj timer
 1a6:	19 bd       	out	0x29, r17	; 41
 1a8:	18 bd       	out	0x28, r17	; 40
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 1aa:	4a b5       	in	r20, 0x2a	; 42
 1ac:	41 60       	ori	r20, 0x01	; 1
 1ae:	4a bd       	out	0x2a, r20	; 42
 1b0:	20 c0       	rjmp	.+64     	; 0x1f2 <__vector_1+0x178>
				//odbieranego bitu. Jest to moment, w którym ustalamy wartoœæ
				//odebranego bitu na podstawie kierunku zbocza.

				//Przesuñ rejestr odbiorczy o jeden bit w lewo by zrobiæ 
				//miejsce na odebrany bit
				dd_rc5_dane_temp <<= 1;
 1b2:	e2 e4       	ldi	r30, 0x42	; 66
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	40 81       	ld	r20, Z
 1b8:	ef 5f       	subi	r30, 0xFF	; 255
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	50 81       	ld	r21, Z
 1be:	e1 50       	subi	r30, 0x01	; 1
 1c0:	f0 40       	sbci	r31, 0x00	; 0
 1c2:	44 0f       	add	r20, r20
 1c4:	55 1f       	adc	r21, r21
 1c6:	ef 5f       	subi	r30, 0xFF	; 255
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	50 83       	st	Z, r21
 1cc:	42 93       	st	-Z, r20
				//Je¿eli aktualnie ustawione jest zbocze narastaj¹ce 
				//to znaczy, ¿e przerwanie zosta³o wywo³ane przez zbocze 
				//opadaj¹ce, a to oznacza, ¿e odebraliœmy jedynkê logiczn¹,
				//któr¹ nale¿y dodaæ na najmniej znacz¹cej pozycji rejestru
				//odbiorczego. Czytaj uwagê na pocz¹tku tej funkcji.
				if(EICRA & (1<<ISC00)) dd_rc5_dane_temp |= 1;
 1ce:	a8 9b       	sbis	0x15, 0	; 21
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <__vector_1+0x15e>
 1d2:	41 60       	ori	r20, 0x01	; 1
 1d4:	41 93       	st	Z+, r20
 1d6:	50 83       	st	Z, r21

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR);	//resetuj preskaler timera
 1d8:	4f b5       	in	r20, 0x2f	; 47
 1da:	41 60       	ori	r20, 0x01	; 1
 1dc:	4f bd       	out	0x2f, r20	; 47
	TCNT0 = 0x00; 			//zeruj timer
 1de:	19 bd       	out	0x29, r17	; 41
 1e0:	18 bd       	out	0x28, r17	; 40
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 1e2:	4a b5       	in	r20, 0x2a	; 42
 1e4:	41 60       	ori	r20, 0x01	; 1
 1e6:	4a bd       	out	0x2a, r20	; 42
				if(EICRA & (1<<ISC00)) dd_rc5_dane_temp |= 1;

				dd_rc5_zeruj_timer_i_flage_przepelnienia();

				//zwiêksz licznik bitów
				dd_rc5_numer_bitu++;
 1e8:	e0 e4       	ldi	r30, 0x40	; 64
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	40 81       	ld	r20, Z
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	40 83       	st	Z, r20

			}


			//czy to ju¿ ostatni bit?
			if(dd_rc5_numer_bitu > 14){
 1f2:	e0 e4       	ldi	r30, 0x40	; 64
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	40 81       	ld	r20, Z
 1f8:	4f 30       	cpi	r20, 0x0F	; 15
 1fa:	f8 f0       	brcs	.+62     	; 0x23a <__vector_1+0x1c0>
				//Tak, odebrano ostatni bit

				//Zapisz dane do zmiennych globalnych

				//1-Dane s¹ na szeœciu najm³odszych bitach
				dd_rc5_dane_odebrane = dd_rc5_dane_temp & 0b111111;
 1fc:	a2 e4       	ldi	r26, 0x42	; 66
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	4c 91       	ld	r20, X
 202:	af 5f       	subi	r26, 0xFF	; 255
 204:	bf 4f       	sbci	r27, 0xFF	; 255
 206:	5c 91       	ld	r21, X
 208:	a1 50       	subi	r26, 0x01	; 1
 20a:	b0 40       	sbci	r27, 0x00	; 0
 20c:	64 2f       	mov	r22, r20
 20e:	75 2f       	mov	r23, r21
 210:	6f 73       	andi	r22, 0x3F	; 63
 212:	77 27       	eor	r23, r23
 214:	c7 e4       	ldi	r28, 0x47	; 71
 216:	d0 e0       	ldi	r29, 0x00	; 0
 218:	68 83       	st	Y, r22

				//2-Adres urz¹dzenia i bit toggle 
				//przesuñ w prawo o 6 pozycji pozbywaj¹c siê bitów danych
				dd_rc5_dane_temp >>= 6; 
 21a:	66 e0       	ldi	r22, 0x06	; 6
 21c:	56 95       	lsr	r21
 21e:	47 95       	ror	r20
 220:	6a 95       	dec	r22
 222:	e1 f7       	brne	.-8      	; 0x21c <__vector_1+0x1a2>
 224:	4d 93       	st	X+, r20
 226:	5c 93       	st	X, r21
				//przepisz bity do rejestru statusu i dodaj bit gotowoœci
				//danych do odczytu
				dd_rc5_status = (dd_rc5_dane_temp & 0b111111) 
 228:	4f 73       	andi	r20, 0x3F	; 63
 22a:	55 27       	eor	r21, r21
 22c:	40 68       	ori	r20, 0x80	; 128
 22e:	a6 e4       	ldi	r26, 0x46	; 70
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	4c 93       	st	X, r20
								| DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU;

				//przygotuj siê do odbioru nowej ramki
				dd_rc5_numer_bitu = 1;
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	40 83       	st	Z, r20

				//Wy³¹czamy dekodowanie (blokada przerwania INT), do momentu
				//gdy program g³ówny ponownie go w³¹czy
				DD_RC5_WYLACZ_DEKODOWANIE;
 238:	98 98       	cbi	0x13, 0	; 19
  }


  //Je¿eli na koñcu funkcji przerwania numer bitu ma wartoœæ 1
  //to oznacza, ¿e zarz¹dano przerwania dekodowania z powodu b³êdu
  if(dd_rc5_numer_bitu==1){
 23a:	e0 e4       	ldi	r30, 0x40	; 64
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	40 81       	ld	r20, Z
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	61 f4       	brne	.+24     	; 0x25c <__vector_1+0x1e2>

//-----------------------------------------------------------------------------

//funkcja zeruj¹ca timer oraz flagê jego przepe³nienia
inline void dd_rc5_zeruj_timer_i_flage_przepelnienia(void){
	GTCCR |= (1<<PSR);	//resetuj preskaler timera
 244:	4f b5       	in	r20, 0x2f	; 47
 246:	41 60       	ori	r20, 0x01	; 1
 248:	4f bd       	out	0x2f, r20	; 47
	TCNT0 = 0x00; 			//zeruj timer
 24a:	19 bd       	out	0x29, r17	; 41
 24c:	18 bd       	out	0x28, r17	; 40
	TIFR0 |= (1<<TOV0);		//zgaœ flagê przepe³nienia timera
 24e:	4a b5       	in	r20, 0x2a	; 42
 250:	41 60       	ori	r20, 0x01	; 1
 252:	4a bd       	out	0x2a, r20	; 42
}

//-----------------------------------------------------------------------------

inline void dd_rc5_ustaw_zbocze_opadajace(void){
	EICRA &= ~(1<<ISC00);	//ustaw wykrywanie zbocza opadaj¹cego
 254:	a8 98       	cbi	0x15, 0	; 21
  //to oznacza, ¿e zarz¹dano przerwania dekodowania z powodu b³êdu
  if(dd_rc5_numer_bitu==1){
  	//ustawiamy stan pocz¹tkowy 
	dd_rc5_zeruj_timer_i_flage_przepelnienia();
	dd_rc5_ustaw_zbocze_opadajace();
	dd_rc5_polbit_licznik = 0;
 256:	e4 e4       	ldi	r30, 0x44	; 68
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	10 83       	st	Z, r17
  //wy³¹cz diodê sygnalizuj¹c¹ przerwanie
  #ifdef _DD_RC5_WLACZ_DIODE_PRZERWAN_
	DD_RC5_LED_PRZ_OFF;
  #endif

}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	0f 91       	pop	r16
 274:	0f bf       	out	0x3f, r16	; 63
 276:	0f 91       	pop	r16
 278:	1f 91       	pop	r17
 27a:	18 95       	reti

0000027c <main>:
volatile unsigned char dd_rc5_status = 0;
volatile unsigned char dd_rc5_last_toggle = 0;

int main(void)
{
	clock_prescaler_select(CLKDF_1); //9,6MHz
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	e7 de       	rcall	.-562    	; 0x4e <clock_prescaler_select>
	DDRB = (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB3);
 280:	4b e0       	ldi	r20, 0x0B	; 11
 282:	41 b9       	out	0x01, r20	; 1
	PORTB = 0;
 284:	12 b9       	out	0x02, r17	; 2
	dd_rc5_ini();
 286:	ea de       	rcall	.-556    	; 0x5c <dd_rc5_ini>
	sleep_enable();
 288:	4a b7       	in	r20, 0x3a	; 58
 28a:	41 60       	ori	r20, 0x01	; 1
 28c:	4a bf       	out	0x3a, r20	; 58
	set_sleep_mode(SLEEP_MODE_IDLE);
 28e:	4a b7       	in	r20, 0x3a	; 58
 290:	41 7f       	andi	r20, 0xF1	; 241
 292:	4a bf       	out	0x3a, r20	; 58
	sei();
 294:	78 94       	sei
    while(1)
    {
        if (dd_rc5_status & DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU)
 296:	e6 e4       	ldi	r30, 0x46	; 70
 298:	f0 e0       	ldi	r31, 0x00	; 0
        {
			dd_rc5_status &= ~DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU;
			DD_RC5_WLACZ_DEKODOWANIE;
			//PORTB ^= (1<<PORTB0);
			if((dd_rc5_dane_odebrane == 0x0c)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB0); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 29a:	c7 e4       	ldi	r28, 0x47	; 71
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	a5 e4       	ldi	r26, 0x45	; 69
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
			if((dd_rc5_dane_odebrane == 0x0e)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB1); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 2a2:	52 e0       	ldi	r21, 0x02	; 2
        if (dd_rc5_status & DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU)
        {
			dd_rc5_status &= ~DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU;
			DD_RC5_WLACZ_DEKODOWANIE;
			//PORTB ^= (1<<PORTB0);
			if((dd_rc5_dane_odebrane == 0x0c)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB0); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 2a4:	61 e0       	ldi	r22, 0x01	; 1
	sleep_enable();
	set_sleep_mode(SLEEP_MODE_IDLE);
	sei();
    while(1)
    {
        if (dd_rc5_status & DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU)
 2a6:	40 81       	ld	r20, Z
 2a8:	47 ff       	sbrs	r20, 7
 2aa:	27 c0       	rjmp	.+78     	; 0x2fa <main+0x7e>
        {
			dd_rc5_status &= ~DD_RC5_STATUS_DANE_GOTOWE_DO_ODCZYTU;
 2ac:	40 81       	ld	r20, Z
 2ae:	4f 77       	andi	r20, 0x7F	; 127
 2b0:	40 83       	st	Z, r20
			DD_RC5_WLACZ_DEKODOWANIE;
 2b2:	98 9a       	sbi	0x13, 0	; 19
			//PORTB ^= (1<<PORTB0);
			if((dd_rc5_dane_odebrane == 0x0c)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB0); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 2b4:	78 81       	ld	r23, Y
 2b6:	8c 91       	ld	r24, X
 2b8:	40 81       	ld	r20, Z
 2ba:	40 72       	andi	r20, 0x20	; 32
 2bc:	84 17       	cp	r24, r20
 2be:	41 f0       	breq	.+16     	; 0x2d0 <main+0x54>
 2c0:	7c 30       	cpi	r23, 0x0C	; 12
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <main+0x54>
 2c4:	42 b1       	in	r20, 0x02	; 2
 2c6:	46 27       	eor	r20, r22
 2c8:	42 b9       	out	0x02, r20	; 2
 2ca:	40 81       	ld	r20, Z
 2cc:	40 72       	andi	r20, 0x20	; 32
 2ce:	4c 93       	st	X, r20
			if((dd_rc5_dane_odebrane == 0x0e)&(dd_rc5_last_toggle != (dd_rc5_status & DD_RC5_TOGGLE))) {PORTB ^= (1<<PORTB1); dd_rc5_last_toggle = (dd_rc5_status & DD_RC5_TOGGLE);}
 2d0:	78 81       	ld	r23, Y
 2d2:	8c 91       	ld	r24, X
 2d4:	40 81       	ld	r20, Z
 2d6:	40 72       	andi	r20, 0x20	; 32
 2d8:	84 17       	cp	r24, r20
 2da:	41 f0       	breq	.+16     	; 0x2ec <main+0x70>
 2dc:	7e 30       	cpi	r23, 0x0E	; 14
 2de:	31 f4       	brne	.+12     	; 0x2ec <main+0x70>
 2e0:	42 b1       	in	r20, 0x02	; 2
 2e2:	45 27       	eor	r20, r21
 2e4:	42 b9       	out	0x02, r20	; 2
 2e6:	40 81       	ld	r20, Z
 2e8:	40 72       	andi	r20, 0x20	; 32
 2ea:	4c 93       	st	X, r20
			EICRA &= ~(1<<ISC01);
 2ec:	a9 98       	cbi	0x15, 1	; 21
			EICRA &= ~(1<<ISC00);
 2ee:	a8 98       	cbi	0x15, 0	; 21
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 2f0:	4a b7       	in	r20, 0x3a	; 58
 2f2:	41 7f       	andi	r20, 0xF1	; 241
 2f4:	44 60       	ori	r20, 0x04	; 4
 2f6:	4a bf       	out	0x3a, r20	; 58
			sleep_cpu();
 2f8:	88 95       	sleep
		}
		set_sleep_mode(SLEEP_MODE_IDLE);
 2fa:	4a b7       	in	r20, 0x3a	; 58
 2fc:	41 7f       	andi	r20, 0xF1	; 241
 2fe:	4a bf       	out	0x3a, r20	; 58
		sleep_cpu();
 300:	88 95       	sleep
    }
 302:	d1 cf       	rjmp	.-94     	; 0x2a6 <main+0x2a>

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
